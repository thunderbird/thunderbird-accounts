"""
Django settings for thunderbird_accounts project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import sys
from pathlib import Path

from django.core.exceptions import DisallowedHost
from dotenv import load_dotenv
import sentry_sdk
from sentry_sdk.types import Event, Hint

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

IS_TEST = 'test' in sys.argv

APP_ENV = os.getenv('APP_ENV')

# Load test env, or if our env is not already loaded, load the regular dotenv
if IS_TEST:
    load_dotenv(dotenv_path='.env.test')
elif not APP_ENV:
    load_dotenv(dotenv_path='.env')

# Refresh app_env in case we just loaded a dotenv
APP_ENV = os.getenv('APP_ENV')

IS_DOCS = APP_ENV == 'docs'
IS_DEV = APP_ENV == 'dev'

# Only allow DEBUG on dev or test envs.
DEBUG: bool = os.getenv('APP_DEBUG') and (IS_DEV or APP_ENV == 'test')


def before_send(event: Event, hint: Hint) -> Event | None:
    """Filter out any exceptions we don't want to pollute sentry"""
    exc_info = hint.get('exc_info', [None])
    if DisallowedHost in exc_info:
        return None

    return event


sentry_sdk.init(
    dsn=os.getenv('SENTRY_DSN'),
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=False,
    traces_sample_rate=1.0,
    profiles_sample_rate=1.0,
    environment=APP_ENV,
    before_send=before_send,
    attach_stacktrace=True,
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
if os.getenv('IN_CONTAINER') == 'True':
    BASE_DIR = Path('/app')
else:
    BASE_DIR = Path(__file__).parent.joinpath('../../')

# URL for public facing absolute links
PUBLIC_BASE_URL = os.getenv('PUBLIC_BASE_URL')

ADMIN_CLIENT_NAME = 'Accounts Admin Panel'
ADMIN_WEBSITE = os.getenv('ADMIN_WEBSITE')
ADMIN_CONTACT = os.getenv('ADMIN_CONTACT')
SUPPORT_CONTACT = os.getenv('SUPPORT_CONTACT')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# These are url reverse keys
LOGIN_URL = 'oidc_authentication_init'
LOGIN_REDIRECT_URL = 'self_serve_home'

LOGIN_CODE_SECRET = os.getenv('LOGIN_CODE_SECRET')
LOGIN_MAX_AGE_IN_SECONDS = 60 * 3

IS_IN_ALLOW_LIST_CACHE_KEY = 'is_in_allow_list'
IS_IN_ALLOW_LIST_CACHE_MAX_AGE_IN_SECONDS = 60 * 60 * 24

AUTH_ALLOW_LIST: str = os.getenv('AUTH_ALLOW_LIST')

# MailChimp form URL for Wait List
WAIT_LIST_FORM_ACTION: str = os.getenv('WAIT_LIST_FORM_ACTION')

# Paddle integration
PADDLE_TOKEN: str = os.getenv('PADDLE_TOKEN')
PADDLE_ENV: str = os.getenv('PADDLE_ENV')
PADDLE_PRICE_ID_LO: str = os.getenv('PADDLE_PRICE_ID_LO')
PADDLE_PRICE_ID_MD: str = os.getenv('PADDLE_PRICE_ID_MD')
PADDLE_PRICE_ID_HI: str = os.getenv('PADDLE_PRICE_ID_HI')
PADDLE_WEBHOOK_KEY: str = os.getenv('PADDLE_WEBHOOK_KEY')
PADDLE_API_KEY: str = os.getenv('PADDLE_API_KEY')
# Used in admin panel to quick link to various subscriptions or product pages
PADDLE_VENDOR_SITE: str = (
    'https://sandbox-vendors.paddle.com' if PADDLE_ENV == 'sandbox' else 'https://vendors.paddle.com'
)

# Zendesk integration
ZENDESK_SUBDOMAIN: str = os.getenv('ZENDESK_SUBDOMAIN')
ZENDESK_USER_EMAIL: str = os.getenv('ZENDESK_USER_EMAIL')
ZENDESK_API_TOKEN: str = os.getenv('ZENDESK_API_TOKEN')

ALLOWED_HOSTS = [host for host in os.getenv('ALLOWED_HOSTS', '').split(',') if host]

# Settings for CSRF cookie.
CSRF_COOKIE_SECURE: bool = os.getenv('CSRF_SECURE') == 'True'
CSRF_COOKIE_HTTPONLY: bool = os.getenv('CSRF_HTTPONLY') == 'True'
if os.getenv('CSRF_TRUSTED_ORIGINS', ''):
    CSRF_TRUSTED_ORIGINS = [host for host in os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if host]

# For local docker usage
if DEBUG:
    ALLOWED_HOSTS += ['localhost', 'accounts']

# Application definition

INSTALLED_APPS = [
    # Internal
    'thunderbird_accounts.authentication',
    'thunderbird_accounts.subscription',
    'thunderbird_accounts.mail',
    'thunderbird_accounts.utils',
    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    # OIDC Auth
    'mozilla_django_oidc',  # Load after auth
    # Django
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third party
    'rest_framework',
    'django_vite',
    'corsheaders',
]

MIDDLEWARE = [
    'thunderbird_accounts.authentication.middleware.SetHostIPInAllowedHostsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'servestatic.middleware.ServeStaticMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
]

ROOT_URLCONF = 'thunderbird_accounts.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath('templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'thunderbird_accounts.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
AVAILABLE_DATABASES = {
    'dev': {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DATABASE_NAME'),
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),
            'PORT': os.getenv('DATABASE_PORT', '5432'),
        },
    },
    'test': {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        },
    },
}

DATABASES = AVAILABLE_DATABASES['test'] if IS_TEST else AVAILABLE_DATABASES['dev']

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'mozilla_django_oidc.contrib.drf.OIDCAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

REDIS_URL = os.getenv('REDIS_URL')
AVAILABLE_CACHES = {
    'dev': {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': f'{REDIS_URL}/{os.getenv("REDIS_INTERNAL_DB")}',
        },
        'shared': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': f'{REDIS_URL}/{os.getenv("REDIS_SHARED_DB")}',
            'TIMEOUT': None,  # No expiry
            'MAX_ENTRIES': 300_000_000,  # TODO: Come up with a solution to also remove db entries
            'OPTIONS': {
                'serializer': 'thunderbird_accounts.utils.utils.JsonSerializer',
            },
        },
    },
    'test': {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        },
        'shared': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'cookie-dispenser',
            'TIMEOUT': None,  # No expiry
            'OPTIONS': {
                'serializer': 'thunderbird_accounts.utils.utils.JsonSerializer',
            },
        },
    },
}

CACHES = AVAILABLE_CACHES['test'] if IS_TEST or IS_DOCS else AVAILABLE_CACHES['dev']

STORAGES = {
    'staticfiles': {
        # TODO: Figure out why CompressedManifestStaticFilesStorage breaks w/ django-vite
        'BACKEND': 'servestatic.storage.CompressedStaticFilesStorage',
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '[{levelname}] {asctime}: {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
    'loggers': {
        'mozilla_django_oidc': {'handlers': ['console'], 'level': 'DEBUG'},
    },
}

SIMPLE_JWT = {
    'USER_ID_FIELD': 'uuid',
    'USER_ID_CLAIM': 'user_uuid',
}

AUTH_SCHEME = os.getenv('AUTH_SCHEME', 'password')

if AUTH_SCHEME == 'oidc':
    AUTHENTICATION_BACKENDS = ['thunderbird_accounts.authentication.middleware.AccountsOIDCBackend']
    OIDC_RP_CLIENT_ID = os.getenv('OIDC_CLIENT_ID')
    OIDC_RP_CLIENT_SECRET = os.getenv('OIDC_CLIENT_SECRET')
    OIDC_RP_SIGN_ALGO = os.getenv('OIDC_SIGN_ALGO')
    OIDC_OP_AUTHORIZATION_ENDPOINT = os.getenv('OIDC_URL_AUTH')
    OIDC_OP_TOKEN_ENDPOINT = os.getenv('OIDC_URL_TOKEN')
    OIDC_OP_USER_ENDPOINT = os.getenv('OIDC_URL_USER')
    OIDC_OP_JWKS_ENDPOINT = os.getenv('OIDC_URL_JWKS')
    ALLOW_LOGOUT_GET_METHOD = True

    def oidc_logout(request):
        return f'{os.getenv("OIDC_URL_LOGOUT")}?client_id={OIDC_RP_CLIENT_ID}'

    OIDC_OP_LOGOUT_URL_METHOD = 'thunderbird_accounts.settings.oidc_logout'

    # this should only be used to transition users from one oidc to another
    # ideally you should turn this off when you're done.
    OIDC_FALLBACK_MATCH_BY_EMAIL = os.getenv('OIDC_FALLBACK_MATCH_BY_EMAIL', '').lower() == 'True'


STALWART_API_URL = os.getenv('STALWART_API_URL')
STALWART_API_AUTH_STRING = os.getenv('STALWART_API_AUTH_STRING')
STALWART_API_AUTH_METHOD = os.getenv('STALWART_API_AUTH_METHOD')
STALWART_DKIM_ALGO = 'Ed25519'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Built files are in ./static
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR.joinpath('static')
ASSETS_ROOT = BASE_DIR.joinpath('assets')

# Unbuilt files are in ./assets
STATICFILES_DIRS = [ASSETS_ROOT]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'authentication.User'

ALLOWED_HOSTS_CACHE_KEY = '__ALLOWED_HOSTS'
ALLOWED_ORIGINS_CACHE_KEY = '__ALLOWED_ORIGINS'

USE_X_FORWARDED_HOST = True

DJANGO_VITE = {
    'default': {
        'dev_mode': DEBUG,
        'manifest_path': 'static/manifest.json',
    }
}

CONNECTION_INFO = {
    'IMAP': {'HOST': os.getenv('IMAP_HOST'), 'PORT': os.getenv('IMAP_PORT'), 'TLS': os.getenv('IMAP_TLS') == 'True'},
    'JMAP': {'HOST': os.getenv('JMAP_HOST'), 'PORT': os.getenv('JMAP_PORT'), 'TLS': os.getenv('JMAP_TLS') == 'True'},
    'SMTP': {'HOST': os.getenv('SMTP_HOST'), 'PORT': os.getenv('SMTP_PORT'), 'TLS': os.getenv('SMTP_TLS') == 'True'},
}

ALLOWED_EMAIL_DOMAINS = (
    [domain.strip() for domain in os.getenv('ALLOWED_EMAIL_DOMAINS').split(',')]
    if os.getenv('ALLOWED_EMAIL_DOMAINS')
    else None
)


# Required otherwise a manifest error will be generated
SERVESTATIC_MANIFEST_STRICT = False

# Celery settings, these are prefixed by CELERY_ and are otherwise just celery parameters
CELERY_BROKER_URL = '/'.join(filter(None, [os.getenv('CELERY_BROKER') or REDIS_URL, os.getenv('REDIS_CELERY_DB')]))
CELERY_RESULT_BACKEND = '/'.join(
    filter(None, [os.getenv('CELERY_BACKEND') or REDIS_URL, os.getenv('REDIS_CELERY_RESULTS_DB')])
)

# If we are using a rediss url, require certs!
if CELERY_BROKER_URL.startswith('rediss://'):
    CELERY_BROKER_URL = f'{CELERY_BROKER_URL}?ssl_cert_reqs=CERT_REQUIRED'
if CELERY_RESULT_BACKEND.startswith('rediss://'):
    CELERY_RESULT_BACKEND = f'{CELERY_RESULT_BACKEND}?ssl_cert_reqs=CERT_REQUIRED'

CELERY_RESULT_EXPIRES = 3600
# If true, immediately run tasks instead of queueing them
CELERY_TASK_ALWAYS_EAGER = os.getenv('CELERY_EAGER', False) == 'True'

# Some debug info for sentry
sentry_sdk.set_extra('REDIS_URL', REDIS_URL)
sentry_sdk.set_extra('CELERY_BROKER_URL', CELERY_BROKER_URL)
sentry_sdk.set_extra('CELERY_RESULT_BACKEND', CELERY_RESULT_BACKEND)
sentry_sdk.set_extra('CELERY_RESULT_EXPIRES', CELERY_RESULT_EXPIRES)
sentry_sdk.set_extra('CELERY_TASK_ALWAYS_EAGER', CELERY_TASK_ALWAYS_EAGER)

# Cors
CORS_PREFLIGHT_MAX_AGE = 0  # For debugging purposes
CORS_ALLOWED_ORIGINS = [host for host in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if host]

ONE_GIGABYTE_IN_BYTES = 1_000_000_000

# For local docker usage
if DEBUG:
    CORS_ALLOWED_ORIGINS += ['http://localhost', 'http://accounts']

# Tell django to use secure in stage/prod
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if not IS_DEV else None
