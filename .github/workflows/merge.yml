---
name: deploy-stage

concurrency:
  group: deploy-stage
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
    outputs:
      src-changed: ${{ steps.check.outputs.src-changed }}
      iac-changed: ${{ steps.check.outputs.iac-changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: dorny/paths-filter@v3
        id: check
        with:
          filters: |
            src-changed:
              - 'assets/**'
              - 'static/**'
              - 'templates/**'
              - 'scripts/dev-entry.sh'
              - 'manage.py'
              - 'MANIFEST.in'
              - 'package.json'
              - 'package-lock.json'
              - 'pyproject.toml'
              - 'README.md'
              - 'uv.lock'
              - 'vite.config.mjs'
            iac-changed:
              - 'pulumi/**'

  # When accounts changes are merged in, build and push a new Docker image
  accounts-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.src-changed == 'true' || needs.detect-changes.outputs.iac-changed == 'true'
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
      PULUMI_DIR: "pulumi"
      CELERY_WORKER_TAG: '-celery-worker'
    steps:
      # Preparation for future steps
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Set up Python ${{ vars.PYTHON_VERSION}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION}}

      - name: Set up virtual environment
        shell: bash
        run: |
          python -m pip install virtualenv
          cd $PULUMI_DIR
          virtualenv ./venv

      - name: Set up Pulumi environment
        id: pulumi-env
        shell: bash
        run: |
          cd $PULUMI_DIR
          source ./venv/bin/activate
          curl -fsSL https://get.pulumi.com | sh
          pip install -Ur requirements.txt

      # Produce a container image
      - name: Build, tag, and push accounts image to Amazon ECR
        id: build-accounts
        env:
          ECR_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ vars.PROJECT }}:${{ github.sha }}"
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_TAG --platform="linux/amd64" .          
          docker push $ECR_TAG
          echo "accounts-image=$ECR_TAG" >> $GITHUB_OUTPUT

      - name: Get version from pyproject.toml
        id: read-version
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: 'pyproject.toml'
          field: 'project.version'

      - name: Produce an artifact containing the tag and version
        id: create-artifact
        run: |
          echo '{"ecr_tag": "${{ steps.build-accounts.outputs.accounts-image }}", "version": "${{ steps.read-version.outputs.value }}"}' > deployment.json

      - name: Archive the deployment artifact
        id: tag-archive
        uses: actions/upload-artifact@v4
        with:
          name: deployment
          path: deployment.json

      # Deploy to stage
      - name: Deploy new image to stage
        shell: bash
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Update the PATH to include the right version of Pulumi; this is non-trivial or impossible
          # to do with the GHA workflow "env" settings above.
          export PATH="/home/runner/.pulumi/bin:$PATH"

          ECR_TAG=$(jq .ecr_tag < deployment.json)
          cd $PULUMI_DIR

          # Create a YAML config stump containing only the nested tree leading to the image tag update
          cat << EOF > newimage.yaml
          resources:
            tb:fargate:FargateClusterWithLogging:
              accounts:
                task_definition:
                  container_definitions:
                    accounts:
                      image: "$ECR_TAG"
              accounts-celery:
                task_definition:
                  container_definitions:
                    accounts:
                      image: "$ECR_TAG"
          EOF

          # Use yq to merge the stump into the main config
          yq -i '. *= load("newimage.yaml")' config.stage.yaml

          source ./venv/bin/activate
          pulumi login
          pulumi stack select thunderbird/stage
          pulumi up -y --diff \
            --target 'urn:pulumi:stage::accounts::tb:fargate:FargateClusterWithLogging$aws:ecs/taskDefinition:TaskDefinition::accounts-stage-fargate-accounts-taskdef' \
            --target 'urn:pulumi:stage::accounts::tb:fargate:FargateClusterWithLogging$aws:ecs/taskDefinition:TaskDefinition::accounts-stage-fargate-accounts-celery-taskdef' \
            --target-dependents
        
        # TODO: Write up something that can monitor the deployments. We don't want to run the e2e tests until we know
        #       the deployment has completed. Can we get the deployment ID from the pulumi run?

  e2e-tests-browserstack-stage:
    name: e2e-tests-browserstack-stage
    needs: accounts-deploy
    if: always() && ${{ !failure() }} && ${{ !cancelled() }}
    runs-on: ubuntu-latest
    environment: staging
    env:
      ACCTS_FXA_EMAIL: ${{ secrets.E2E_ACCTS_FXA_EMAIL }}
      ACCTS_FXA_PWORD: ${{ secrets.E2E_ACCTS_FXA_PWORD }}
      FXA_CLIENT_ID: ${{ secrets.E2E_ACCTS_FXA_CLIENT_ID }}
      FXA_SECRET: ${{ secrets.E2E_ACCTS_FXA_SECRET }}
      SECRET_KEY: ${{ secrets.E2E_ACCTS_SECRET_KEY }}
      LOGIN_CODE_SECRET: ${{ secrets.E2E_ACCTS_LOGIN_CODE_SECRET }}
      FXA_ENCRYPT_SECRET: ${{ secrets.E2E_ACCTS_FXA_ENCRYPT_SECRET }}
      THUNDERMAIL_USERNAME: ${{ secrets.E2E_THUNDERMAIL_USERNAME }}
      THUNDERMAIL_EMAIL_ADDRESS: ${{ secrets.E2E_THUNDERMAIL_EMAIL_ADDRESS }}
      EMAIL_SIGN_UP_ADDRESS: ${{ secrets.E2E_ACCTS_PADDLE_EMAIL_SIGN_UP_ADDRESS }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'test/e2e/package-lock.json'

      - name: Install dependencies
        run: |
          cd ./test/e2e
          npm install

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@master
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          project-name: 'Thunderbird Accounts'
          build-name: 'TB Accounts E2E Tests: BUILD_INFO'

      - name: Run E2E Tests on stage via Browserstack
        run: |
          cd ./test/e2e
          cp .env.stage.example .env
          npm run e2e-test-browserstack-gha
