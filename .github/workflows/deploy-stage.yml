---
name: deploy-stage

concurrency:
  group: deploy-stage
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
    outputs:
      accounts-changed: ${{ steps.check.outputs.accounts-changed }}
      iac-changed: ${{ steps.check.outputs.iac-changed }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - uses: dorny/paths-filter@v3
        id: check
        with:
          filters: |
            code-changed:
              - 'src/**'
            iac-changed:
              - 'pulumi/**'
              - '.github/workflows/validate.yml'
              - '.github/workflows/deploy-stage.yml'

  # When accounts changes are merged in, build and push a new Docker image
  accounts-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true' || needs.detect-changes.outputs.iac-changed == 'true'
    runs-on: ubuntu-latest
    env:
      IS_CI_AUTOMATION: "yes"
      PULUMI_DIR: "pulumi"
    steps:
      # Preparation for future steps
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set up virtual environment
        shell: bash
        run: |
          python -m pip install virtualenv
          cd $PULUMI_DIR
          virtualenv ./venv

      - name: Set up Pulumi environment
        id: pulumi-env
        shell: bash
        run: |
          cd $PULUMI_DIR
          source ./venv/bin/activate
          curl -fsSL https://get.pulumi.com | sh
          pip install -Ur requirements.txt

      # Produce a container image
      - name: Build, tag, and push accounts image to Amazon ECR
        id: build-accounts
        env:
          ECR_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ vars.PROJECT }}:${{ github.sha }}"
        run: |
          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_TAG -f ./Dockerfile.stage --platform="linux/amd64" .          
          docker push $ECR_TAG
          echo "accounts-image=$ECR_TAG" >> $GITHUB_OUTPUT
          echo -n "$ECR_TAG" > ecr_tag.txt

      - name: Archive the ECR tag
        id: tag-archive
        uses: actions/upload-artifact@v4
        with:
          name: ecr_tag
          path: ecr_tag.txt

      # Deploy to stage
      - name: Deploy new image to stage
        shell: bash
        env:
          ECR_TAG: "${{ steps.login-ecr.outputs.registry }}/${{ vars.PROJECT }}:${{ github.sha }}"
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          # Update the PATH to include the right version of Pulumi; this is non-trivial or impossible
          # to do with the GHA workflow "env" settings above.
          export PATH="/home/runner/.pulumi/bin:$PATH"

          cd $PULUMI_DIR

          # Create a YAML config stump containing only the nested tree leading to the image tag update
          cat << EOF > newimage.yaml
          resources:
            tb:fargate:FargateClusterWithLogging:
              accounts:
                task_definition:
                  container_definitions:
                    accounts:
                      image: "$ECR_TAG"
          EOF

          # Use yq to merge the stump into the main config
          yq -i '. *= load("newimage.yaml")' config.stage.yaml

          source ./venv/bin/activate
          pulumi login
          pulumi stack select thunderbird/accounts/stage
          pulumi up -y --diff \
            --target 'urn:pulumi:stage::accounts::tb:fargate:FargateClusterWithLogging$aws:ecs/taskDefinition:TaskDefinition::accounts-stage-fargate-taskdef' \
            --target-dependents